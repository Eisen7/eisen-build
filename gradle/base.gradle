repositories {
        mavenLocal()
    maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
    maven { url 'https://repo.spring.io/release/' }
    mavenCentral()
    maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
    maven { url 'https://repo.spring.io/release/' }
    mavenCentral()
}

ext {

    springBootVersion = '2.1.2.RELEASE'
    mybatisVersion = '3.5.0'
    mysqlJdbcVersion = '8.0.13'
    HikariCPVersion = '3.3.0'
    metricsCoreVersion = '4.0.5'
    mybatisGeneratorVersion = '1.3.7'
    mybatisSpringBootVersion = '2.0.0'
    gsonVersioin = '2.8.5'

    commonsFilesUploadVersion='1.4'

    springDeps = [
            springBootStarterWeb: 'org.springframework.boot:spring-boot-starter-web:' + springBootVersion,
            springBoot: 'org.springframework.boot:spring-boot:' + springBootVersion,
    ]


    databaseDeps = [
            mysqlConnectorJava: 'mysql:mysql-connector-java:'+mysqlJdbcVersion,
            mybatis           : 'org.mybatis:mybatis:' + mybatisVersion,
            HikariCP          : 'com.zaxxer:HikariCP:'+HikariCPVersion,
            dropwizard        : 'io.dropwizard.metrics:metrics-core:'+metricsCoreVersion,
            mybatisGenertor   : 'org.mybatis.generator:mybatis-generator-core:'+mybatisGeneratorVersion,
            mybatisSpring     : 'org.mybatis.spring.boot:mybatis-spring-boot-starter:'+mybatisSpringBootVersion,
    ]

    dataFormat = [
            gson: 'com.google.code.gson:gson:'+gsonVersioin,
    ]

    commons = [
            fileupload: 'commons-fileupload:commons-fileupload:'+commonsFilesUploadVersion,
    ]

}


allprojects {
    configurations.all {
        // 动态版本
        resolutionStrategy.cacheDynamicVersionsFor 512, 'hours'
        // 变化模块
        resolutionStrategy.cacheChangingModulesFor 128, 'hours'
    }

    processResources {
        from('src/main/java') {
            include '**/*.xml'
        }
    }

    task runtimeToLocal(type: Copy) {
        from configurations.runtime
        into '/libs' // 目标位置
    }

    task processAll(type: Copy) {
        from('src/main/java') {
            exclude '**/*.java'
        }
        into 'out/production/classes/'
    }

}

